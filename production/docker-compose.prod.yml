version: '3.8'

services:
  backend:
    build:
      context: ../backend
      dockerfile: ../production/backend.Dockerfile.prod
      args:
        - ENVIRONMENT=production
    container_name: personal-finance-backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@db:5432/personal_finance}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ACCESS_TOKEN_EXPIRES=${JWT_ACCESS_TOKEN_EXPIRES:-3600}
      - JWT_REFRESH_TOKEN_EXPIRES=${JWT_REFRESH_TOKEN_EXPIRES:-2592000}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost}
      - PORT=${BACKEND_CONTAINER_PORT:-5000}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT:-5000}:${BACKEND_CONTAINER_PORT:-5000}"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_CONTAINER_PORT:-5000}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  frontend:
    build:
      context: ../frontend
      dockerfile: ../production/frontend.Dockerfile.prod
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:5000}
    container_name: personal-finance-frontend
    environment:
      - PORT=${FRONTEND_CONTAINER_PORT:-80}
    ports:
      - "${FRONTEND_PORT:-80}:${FRONTEND_CONTAINER_PORT:-80}"
      - "${FRONTEND_HTTPS_PORT:-443}:443"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:${FRONTEND_CONTAINER_PORT:-80}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    volumes:
      - ../nginx/ssl:/etc/nginx/ssl:ro

  db:
    image: postgres:15-alpine
    container_name: personal-finance-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-personal_finance}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend/src/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: personal-finance-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge